<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dream11 Team Predictor</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Marked.js CDN for Markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- jsPDF for PDF generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <!-- html2canvas to convert HTML to image for PDF -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Lucide Icons for a modern, futuristic feel -->
    <script src="https://cdn.jsdelivr.net/npm/lucide-dynamic@latest/dist/lucide.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        /*
         * --- Custom Styles for Dream11 Predictor ---
         * This section enhances the Tailwind CSS with a modern, futuristic theme,
         * including a vibrant color palette, subtle animations, and improved
         * responsiveness and UI elements.
         */
        
        /* Basic font and transition settings for the whole page */
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.4s ease, color 0.4s ease;
        }

        /* Defining a vibrant color palette using CSS variables */
        :root {
            /* Light mode colors */
            --bg-color-light: #f3f4f6;
            --card-bg-light: #ffffff;
            --text-color-light: #1f2937;
            --border-color-light: #e5e7eb;
            
            /* Dark mode colors */
            --bg-color-dark: #0a0a0f;
            --card-bg-dark: #13131a;
            --text-color-dark: #e5e7eb;
            --border-color-dark: #374151;
            
            /* Accent colors for buttons, highlights, etc. */
            --accent-primary: #1e88e5; /* A vibrant blue */
            --accent-secondary: #00e676; /* A lively green */
            --accent-error: #ef4444; /* A clear red for errors */
        }
        
        /* Apply colors based on light or dark body class */
        body.light {
            background-color: var(--bg-color-light);
            color: var(--text-color-light);
        }

        body.dark {
            background-color: var(--bg-color-dark);
            color: var(--text-color-dark);
        }

        /* Tailwind overrides for dark mode to ensure consistency */
        body.dark .bg-white { background-color: var(--card-bg-dark); }
        body.dark .bg-gray-50 { background-color: #1a1a2e; }
        body.dark .border-gray-100 { border-color: var(--border-color-dark); }
        body.dark .border-gray-200 { border-color: #4b5563; }
        body.dark .text-gray-800 { color: var(--text-color-dark); }
        body.dark .text-gray-900 { color: var(--text-color-dark); }
        body.dark .text-gray-600 { color: #a1a1aa; } /* Gray 400 */
        body.dark .text-gray-700 { color: #d4d4d8; } /* Gray 300 */
        body.dark .bg-gray-200 { background-color: #3f3f46; color: #f4f4f5; }
        body.dark .hover\:bg-gray-300:hover { background-color: #52525b; }
        body.dark .bg-gray-100 { background-color: #27272a; }
        body.dark .shadow-2xl { box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.45); }
        body.dark #chat-history { background-color: #1a1a2e; }
        body.dark #chat-input { background-color: #27272a; color: var(--text-color-dark); border-color: #4b5563; }
        body.dark #chat-history::-webkit-scrollbar-track { background: #374151; }
        body.dark #chat-history::-webkit-scrollbar-thumb { background: #6b7280; }
        body.dark #chat-history::-webkit-scrollbar-thumb:hover { background: #9ca3af; }
        body.dark .bg-indigo-50 { background-color: #1a1a2e; }
        body.dark #error-message { background-color: #fee2e2; color: #b91c1c; }
        
        /* Custom styles for glowing effects on buttons and borders */
        .glow-button {
            position: relative;
            z-index: 10;
            transition: all 0.4s ease;
            box-shadow: 0 0 10px var(--accent-primary);
        }
        .glow-button:hover {
            box-shadow: 0 0 15px var(--accent-primary), 0 0 25px var(--accent-primary), 0 0 35px var(--accent-primary);
            transform: translateY(-2px);
        }
        .glow-border {
            box-shadow: 0 0 10px rgba(30, 136, 229, 0.5); /* Semi-transparent glow */
        }
        
        /* Markdown content styling for better readability */
        .markdown-content h1, .markdown-content h2, .markdown-content h3 { font-weight: bold; margin-bottom: 0.75em; margin-top: 1.5em; line-height: 1.2; }
        .markdown-content h1 { font-size: 2.25rem; }
        .markdown-content h2 { font-size: 1.875rem; }
        .markdown-content h3 { font-size: 1.5rem; }
        .markdown-content ul, .markdown-content ol { list-style-position: inside; margin-left: 1.5em; margin-bottom: 1em; }
        .markdown-content li { margin-bottom: 0.5em; }
        .markdown-content strong { color: var(--accent-secondary); }
        
        /* Custom styles for dark mode toggle switch */
        .slider {
            background-color: #d1d5db;
            transition: .4s;
        }
        .dark .slider {
            background-color: #4b5563;
        }
        .slider:before {
            background-color: white;
            transition: .4s;
        }
        input:checked + .slider {
            background-color: var(--accent-primary);
        }
        input:checked + .slider:before {
            transform: translateX(24px);
        }

        /* Custom scrollbar for a sleek look */
        #chat-history::-webkit-scrollbar { width: 8px; }
        #chat-history::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 4px; }
        #chat-history::-webkit-scrollbar-thumb { background: #888; border-radius: 4px; }
        #chat-history::-webkit-scrollbar-thumb:hover { background: #555; }
        .dark #chat-history::-webkit-scrollbar-track { background: #374151; }
        .dark #chat-history::-webkit-scrollbar-thumb { background: #6b7280; }
        .dark #chat-history::-webkit-scrollbar-thumb:hover { background: #9ca3af; }
        
        /* Modern loading animation */
        .loader-container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }
        .loader-dot {
            width: 12px;
            height: 12px;
            margin: 0 4px;
            background-color: var(--accent-primary);
            border-radius: 50%;
            display: inline-block;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .loader-dot:nth-child(1) { animation-delay: -0.32s; }
        .loader-dot:nth-child(2) { animation-delay: -0.16s; }
        .loader-dot:nth-child(3) { animation-delay: 0s; }
        
        @keyframes bounce {
            0%, 80%, 100% {
                transform: scale(0);
            }
            40% {
                transform: scale(1.0);
            }
        }
        
        /* Floating Chat Popup styles */
        #chat-popup-container {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            z-index: 50;
        }

        /* Floating button style with text and icon */
        #chat-toggle-button {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px; /* full rounded */
            box-shadow: 0 0 10px var(--accent-secondary);
            background-color: var(--accent-secondary);
            color: white;
            font-weight: bold;
            transition: all 0.3s ease;
            cursor: pointer;
            border: none;
            animation: pulse-glow 2s infinite cubic-bezier(0.4, 0, 0.6, 1);
        }
        #chat-toggle-button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 15px var(--accent-secondary), 0 0 25px var(--accent-secondary), 0 0 35px var(--accent-secondary);
        }

        @keyframes pulse-glow {
            0%, 100% { box-shadow: 0 0 10px var(--accent-secondary); }
            50% { box-shadow: 0 0 20px var(--accent-secondary), 0 0 30px var(--accent-secondary); }
        }
        
        #chat-popup-window {
            /* Adjusted for better responsiveness */
            width: 100%;
            max-width: 400px;
            height: 500px;
            max-height: 80vh;
            display: flex;
            flex-direction: column;
            background-color: var(--card-bg-light);
            border-radius: 1.5rem; /* 24px */
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            border: 1px solid var(--border-color-light);
            transition: all 0.3s ease-in-out;
            transform-origin: bottom right;
        }

        /* Dark mode specific for the chat popup */
        body.dark #chat-popup-window {
            background-color: var(--card-bg-dark);
            border-color: var(--border-color-dark);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.45);
        }
        
        /* New classes for animation */
        .chat-hidden {
            opacity: 0;
            transform: scale(0.8);
            visibility: hidden;
            pointer-events: none;
        }
        .chat-visible {
            opacity: 1;
            transform: scale(1);
            visibility: visible;
            pointer-events: auto;
        }

        /* Responsive adjustments for the floating chat */
        @media (max-width: 768px) {
            #chat-popup-container {
                /* On small screens, move the button closer to the corner */
                bottom: 1rem;
                right: 1rem;
            }
            #chat-popup-window {
                /* On small screens, the popup should be bigger */
                bottom: 1rem;
                right: 1rem;
                width: calc(100vw - 2rem);
                max-width: none; /* Override max-width for full screen-ish size */
                height: calc(100vh - 2rem);
            }
            /* Hide text on floating button on smaller screens */
            #chat-toggle-button span {
                display: none;
            }
            #chat-toggle-button {
                padding: 0.75rem; /* Make the button a square */
            }
        }
        
        /* New chat message styles */
        .chat-message {
            margin-bottom: 0.75rem; /* 12px */
            padding: 1rem; /* 16px */
            border-radius: 1.5rem; /* 24px */
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            word-break: break-word; /* Ensure long words break */
            transition: all 0.3s ease;
            transform: scale(0.95);
            transform-origin: bottom;
            max-width: 85%;
        }

        .chat-message.user {
            background-color: #e0f2fe; /* Light blue */
            color: #1e40af; /* Dark blue */
            margin-left: auto;
            border-bottom-right-radius: 0.5rem; /* 8px */
        }
        body.dark .chat-message.user {
            background-color: #1a237e; /* Darker blue */
            color: #e0e7ff; /* Lighter blue */
        }

        .chat-message.ai {
            background-color: #f3f4f6; /* Light gray */
            color: #374151; /* Dark gray */
            margin-right: auto;
            border-bottom-left-radius: 0.5rem; /* 8px */
        }
        body.dark .chat-message.ai {
            background-color: #2d3748; /* Darker gray */
            color: #f9fafb; /* Lighter gray */
        }

        /* Styling for chat attachments */
        .chat-image {
            max-width: 100%;
            height: auto;
            border-radius: 0.75rem;
            margin-top: 0.5rem;
            display: block;
        }
        
        /* Styling for the copy message */
        #copy-message {
            position: fixed;
            bottom: 6rem;
            left: 50%;
            transform: translateX(-50%);
            padding: 0.75rem 1.5rem;
            background-color: #10b981;
            color: white;
            border-radius: 9999px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            opacity: 0;
            visibility: hidden;
            transition: all 0.5s ease-in-out;
            z-index: 100;
        }

        #copy-message.show {
            opacity: 1;
            visibility: visible;
        }

        /* --- New/Enhanced Styles for Chat AI Responses & Code Blocks --- */
        
        .chat-message.ai .ai-content-wrapper {
            /* This wrapper is to facilitate better styling around markdown content */
            padding: 0; /* Markdown adds its own spacing, so zero here */
            margin: 0;
        }
        
        /* General markdown styling within AI messages */
        .chat-message.ai .ai-content-wrapper p,
        .chat-message.ai .ai-content-wrapper ul,
        .chat-message.ai .ai-content-wrapper ol,
        .chat-message.ai .ai-content-wrapper h1,
        .chat-message.ai .ai-content-wrapper h2,
        .chat-message.ai .ai-content-wrapper h3,
        .chat-message.ai .ai-content-wrapper blockquote {
            margin-bottom: 1em;
        }
        .chat-message.ai .ai-content-wrapper p:last-child,
        .chat-message.ai .ai-content-wrapper ul:last-child,
        .chat-message.ai .ai-content-wrapper ol:last-child,
        .chat-message.ai .ai-content-wrapper blockquote:last-child {
            margin-bottom: 0;
        }
        .chat-message.ai .ai-content-wrapper ul,
        .chat-message.ai .ai-content-wrapper ol {
            padding-left: 1.5em; /* Standard list indent */
        }
        .chat-message.ai .ai-content-wrapper li {
            margin-bottom: 0.5em;
        }
        .chat-message.ai .ai-content-wrapper strong {
            font-weight: bold;
            color: var(--accent-primary); /* Use primary accent for emphasis */
        }
        .chat-message.ai .ai-content-wrapper em {
            font-style: italic;
        }
        .chat-message.ai .ai-content-wrapper blockquote {
            border-left: 4px solid var(--accent-primary);
            padding-left: 1em;
            margin-left: 0;
            color: var(--text-color-dark); /* Ensure readability in light/dark mode */
        }
        body.light .chat-message.ai .ai-content-wrapper blockquote {
             color: #4b5563; /* Gray 700 */
        }

        /* Code block specific styling */
        .code-block-container {
            position: relative;
            background-color: #27272a; /* Dark background for code */
            color: #f8f8f2; /* Light text color for code */
            border-radius: 0.75rem; /* Rounded corners */
            margin-top: 1rem;
            margin-bottom: 1rem;
            overflow: hidden; /* Ensure rounded corners clip content */
            border: 1px solid #3f3f46; /* Subtle border */
        }
        
        .code-block-container pre {
            margin: 0; /* Remove default margin from pre */
            padding: 1rem;
            overflow-x: auto; /* Horizontal scroll for long lines */
            font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace; /* Monospaced font */
            font-size: 0.9em;
            line-height: 1.4;
        }

        .code-block-container code {
            /* No specific styling for `code` inside `pre` as `pre` sets it */
        }

        .code-block-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #374151; /* Header background */
            color: #d1d5db; /* Header text */
            padding: 0.5rem 1rem;
            border-bottom: 1px solid #4b5563;
            font-size: 0.85em;
            border-top-left-radius: 0.75rem;
            border-top-right-radius: 0.75rem;
        }

        .code-block-copy-button {
            background-color: transparent;
            border: none;
            color: #d1d5db;
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.85em;
        }
        .code-block-copy-button:hover {
            background-color: #4b5563;
            color: white;
        }
        .code-block-copy-button:active {
            transform: scale(0.95);
        }

        /* Smallest font size for inline code blocks if any */
        .chat-message.ai .ai-content-wrapper code:not(pre > code) {
            background-color: rgba(100, 116, 139, 0.2); /* slategray-200 with transparency */
            border-radius: 0.25rem;
            padding: 0.2em 0.4em;
            font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace;
            font-size: 0.9em;
            color: #5b21b6; /* deep violet for inline code */
        }
        body.dark .chat-message.ai .ai-content-wrapper code:not(pre > code) {
            background-color: rgba(100, 116, 139, 0.4);
            color: #a78bfa; /* violet-400 */
        }

        /* Ensure links are distinguishable */
        .chat-message.ai .ai-content-wrapper a {
            color: var(--accent-primary);
            text-decoration: underline;
            transition: color 0.2s ease;
        }
        .chat-message.ai .ai-content-wrapper a:hover {
            color: #0d47a1; /* Darker blue on hover */
        }
        body.dark .chat-message.ai .ai-content-wrapper a {
            color: #60a5fa; /* Blue-400 */
        }
        body.dark .chat-message.ai .ai-content-wrapper a:hover {
            color: #93c5fd; /* Blue-300 */
        }

    </style>
</head>
<body class="antialiased dark">

    <!-- Main container with fluid padding for responsiveness -->
    <div class="container mx-auto p-4 md:p-8 lg:p-12 min-h-screen flex items-center justify-center">
        <div class="bg-white rounded-3xl shadow-2xl p-6 md:p-10 lg:p-12 border border-gray-100 transition-colors duration-300 w-full max-w-6xl glow-border">
            
            <!-- Header Section with Dark Mode Toggle -->
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-10">
                <div class="text-left mb-4 md:mb-0">
                    <h1 class="text-4xl md:text-5xl lg:text-6xl font-extrabold text-gray-900 tracking-tight">
                        Dream11 Predictor ⚡
                    </h1>
                    <p class="text-lg md:text-xl text-gray-600 mt-2">
                        Analyze data and craft your winning team with AI.
                    </p>
                </div>
                <div class="flex items-center space-x-2 mt-4 md:mt-0">
                    <span class="text-gray-500 text-sm">Light</span>
                    <label class="switch relative inline-block w-14 h-8">
                        <input type="checkbox" id="dark-mode-toggle" class="opacity-0 w-0 h-0">
                        <span class="slider absolute cursor-pointer top-0 left-0 right-0 bottom-0 rounded-full before:absolute before:content-[''] before:h-6 before:w-6 before:left-1 before:bottom-1 before:rounded-full"></span>
                    </label>
                    <span class="text-gray-500 text-sm">Dark</span>
                </div>
            </div>

            <!-- Main Content Area with responsive columns -->
            <div class="flex flex-col gap-8">
                <!-- Prediction Output -->
                <div class="flex-1">
                    
                    <!-- Upload and Preview Section -->
                    <div class="bg-gray-50 rounded-2xl p-6 sm:p-8 mb-4 border-2 border-dashed border-gray-200 transition-all duration-300 hover:bg-gray-100">
                        <label for="image-upload" class="cursor-pointer block">
                            <div class="flex flex-col items-center justify-center p-4 sm:p-6 text-center">
                                <i data-lucide="upload-cloud" class="w-12 h-12 sm:w-14 sm:h-14 text-indigo-500 animate-pulse"></i>
                                <p class="mt-4 text-sm text-gray-600">
                                    <span class="font-semibold text-indigo-600 hover:text-indigo-700 transition-colors">
                                        Click to upload
                                    </span>
                                    or drag and drop your image(s)
                                </p>
                                <p class="text-xs text-gray-500 mt-1">PNG, JPG up to 10MB per image</p>
                            </div>
                        </label>
                        <input type="file" id="image-upload" accept="image/*" class="hidden" multiple>
                    </div>

                    <div id="preview-container" class="mb-4 hidden transition-opacity duration-300">
                        <h2 class="text-lg sm:text-xl font-bold mb-4 text-gray-700">Image Preview(s):</h2>
                        <div id="image-previews" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            <!-- Image previews will be dynamically added here -->
                        </div>
                    </div>

                    <!-- Action and Status Buttons -->
                    <div class="flex flex-col sm:flex-row gap-4 mb-8">
                        <button id="analyze-btn" class="flex-1 py-3 px-6 sm:py-4 sm:px-8 rounded-full bg-indigo-600 text-white font-bold shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-4 focus:ring-indigo-300 transition-all duration-300 disabled:bg-indigo-400 disabled:cursor-not-allowed transform hover:scale-105 glow-button" style="--accent-primary: #1e88e5;">
                            Analyze and Predict
                        </button>
                        <button id="clear-btn" class="flex-1 py-3 px-6 sm:py-4 sm:px-8 rounded-full bg-gray-200 text-gray-800 font-bold shadow-lg hover:bg-gray-300 focus:outline-none focus:ring-4 focus:ring-gray-400 transition-all duration-300 transform hover:scale-105">
                            Clear All
                        </button>
                    </div>

                    <!-- AI Response Section -->
                    <div id="results-container" class="hidden transition-opacity duration-300">
                        <h2 class="text-xl sm:text-2xl font-bold mb-4 text-gray-700 border-b-2 border-indigo-500 pb-2">AI's Dream11 Prediction:</h2>
                        <div id="loading-indicator" class="hidden text-center text-gray-500 text-sm py-8">
                             <!-- Modern loader animation -->
                             <div class="loader-container">
                                <div class="loader-dot"></div>
                                <div class="loader-dot"></div>
                                <div class="loader-dot"></div>
                             </div>
                            <span class="mt-4 block">Analyzing the image(s) and generating the team...</span>
                        </div>
                        <div id="error-message" class="hidden bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-xl relative shadow-md" role="alert">
                            <span class="block sm:inline" id="error-text"></span>
                        </div>
                        <div id="prediction-output" class="p-6 bg-gray-100 rounded-xl border border-gray-200 text-base shadow-inner markdown-content"></div>
                        
                        <!-- New buttons for PDF and Text Export -->
                        <div id="export-buttons" class="mt-4 flex flex-col sm:flex-row gap-4 hidden">
                            <button id="save-pdf-btn" class="flex-1 py-3 px-6 sm:py-4 sm:px-8 rounded-full bg-green-500 text-white font-bold shadow-lg hover:bg-green-600 focus:outline-none focus:ring-4 focus:ring-green-300 transition-all duration-300 transform hover:scale-105">
                                <i data-lucide="file-text" class="w-5 h-5 mr-2 inline-block"></i> Save as PDF
                            </button>
                            <button id="share-text-btn" class="flex-1 py-3 px-6 sm:py-4 sm:px-8 rounded-full bg-blue-500 text-white font-bold shadow-lg hover:bg-blue-600 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-300 transform hover:scale-105">
                                <i data-lucide="share-2" class="w-5 h-5 mr-2 inline-block"></i> Share as Text
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Floating Chat Popup -->
    <div id="chat-popup-container">
        <!-- Floating button to open the chat -->
        <button id="chat-toggle-button" class="group hidden">
            <i data-lucide="message-square" class="w-6 h-6 text-white transition-transform duration-300 group-hover:rotate-12"></i>
            <span class="ml-2">Chat with AI</span>
        </button>

        <!-- The actual chat popup window -->
        <div id="chat-popup-window" class="chat-hidden fixed bottom-24 right-4 md:right-8 lg:right-12 flex-col">
            <!-- Header for the chat popup -->
            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700 rounded-t-2xl bg-gray-50 dark:bg-gray-800">
                <h2 class="text-lg font-bold text-gray-800 dark:text-gray-200">Chat with AI</h2>
                <button id="chat-close-button" aria-label="Close Chat" class="text-gray-500 hover:text-gray-900 dark:hover:text-white transition-colors p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
                    <i data-lucide="x" class="w-6 h-6"></i>
                </button>
            </div>
            
            <!-- Chat history div with a minimum height and scroll -->
            <div id="chat-history" class="p-4 overflow-y-auto flex-1 flex flex-col">
                <!-- Chat messages will be appended here -->
            </div>
            
            <!-- Chat input section with attachment and send button -->
            <div class="p-4 border-t border-gray-200 dark:border-gray-700">
                <!-- Attachment preview -->
                <div id="chat-attachments-preview-container" class="mb-2 flex flex-wrap items-center gap-2 hidden">
                    <!-- Attachments previews will be dynamically added here -->
                </div>
                <div class="flex gap-2">
                    <input type="text" id="chat-input" class="flex-1 p-3 rounded-full border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white" placeholder="Ask a follow-up question...">
                    <label for="chat-image-upload" class="flex items-center justify-center w-12 h-12 rounded-full bg-gray-200 text-gray-600 dark:bg-gray-700 dark:text-gray-200 shadow-lg hover:bg-gray-300 dark:hover:bg-gray-600 cursor-pointer transition-all duration-300 flex-shrink-0">
                        <i data-lucide="paperclip" class="w-5 h-5"></i> <!-- Changed icon to paperclip for general attachment -->
                    </label>
                    <input type="file" id="chat-image-upload" accept="image/*, .txt, .pdf, .csv, .json, .xml, .md" class="hidden" multiple>
                    <button id="send-chat-btn" aria-label="Send Message" class="flex items-center justify-center w-12 h-12 rounded-full bg-indigo-600 text-white shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-4 focus:ring-indigo-300 transition-all duration-300 disabled:bg-indigo-400 disabled:cursor-not-allowed glow-button flex-shrink-0" style="--accent-primary: #1e88e5;">
                        <i data-lucide="send" class="w-5 h-5"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Temporary message for clipboard copy -->
    <div id="copy-message">Text copied to clipboard!</div>


    <script type="text/javascript">
        // JavaScript for handling image upload, API call, and chat functionality
        
        // This function call is from the Lucide Icon library to replace all `<i>` tags with the corresponding SVG icons
        const createIcons = () => {
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        };

        window.addEventListener('load', () => {
             // Create icons on initial page load for the main UI
             createIcons();
        });

        const imageUpload = document.getElementById('image-upload');
        const imagePreviewsContainer = document.getElementById('image-previews'); // Changed to container
        const previewContainer = document.getElementById('preview-container');
        const analyzeBtn = document.getElementById('analyze-btn');
        const clearBtn = document.getElementById('clear-btn');
        const loadingIndicator = document.getElementById('loading-indicator');
        const resultsContainer = document.getElementById('results-container');
        const predictionOutput = document.getElementById('prediction-output');
        const exportButtons = document.getElementById('export-buttons');
        const savePdfBtn = document.getElementById('save-pdf-btn');
        const shareTextBtn = document.getElementById('share-text-btn');
        const errorContainer = document.getElementById('error-message');
        const errorText = document.getElementById('error-text');
        
        // Dark Mode elements
        const darkModeToggle = document.getElementById('dark-mode-toggle');
        
        // Chat elements
        const chatToggleButton = document.getElementById('chat-toggle-button');
        const chatPopupWindow = document.getElementById('chat-popup-window');
        const chatCloseButton = document.getElementById('chat-close-button');
        const chatHistoryDiv = document.getElementById('chat-history');
        const chatInput = document.getElementById('chat-input');
        const sendChatBtn = document.getElementById('send-chat-btn');
        const chatImageUpload = document.getElementById('chat-image-upload');
        const chatAttachmentsPreviewContainer = document.getElementById('chat-attachments-preview-container'); // Changed to container
        
        // Copy message element
        const copyMessage = document.getElementById('copy-message');

        let uploadedMainImages = []; // Array to store {mimeType, data} for main upload
        let chatAttachments = []; // Array to store {file: File, mimeType: string, data: string} for chat
        let chatHistory = [];
        let lastPredictionText = '';

        // Dark Mode Initialization and Listener
        // Set dark mode as default if not already set in local storage
        if (localStorage.getItem('dark-mode') === null) {
            localStorage.setItem('dark-mode', 'true');
        }
        
        const isDarkMode = localStorage.getItem('dark-mode') === 'true';
        if (isDarkMode) {
            document.body.classList.add('dark');
            darkModeToggle.checked = true;
        } else {
            document.body.classList.remove('dark');
            darkModeToggle.checked = false;
        }

        darkModeToggle.addEventListener('change', () => {
            if (darkModeToggle.checked) {
                document.body.classList.add('dark');
                localStorage.setItem('dark-mode', 'true');
            } else {
                document.body.classList.remove('dark');
                localStorage.setItem('dark-mode', 'false');
            }
        });

        // Function to convert a file to a Base64 string and return its MIME type and data
        const fileToBase64 = (file) => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve({
                    mimeType: file.type || 'application/octet-stream', // Fallback MIME type
                    data: reader.result.split(',')[1]
                });
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        };

        // Function to get Lucide icon name based on MIME type
        function getFileIcon(mimeType) {
            if (mimeType.startsWith('image/')) return 'image';
            if (mimeType === 'application/pdf') return 'file-text';
            if (mimeType.includes('text/')) return 'file-text';
            if (mimeType.includes('csv') || mimeType.includes('excel')) return 'file-spreadsheet';
            if (mimeType.includes('json') || mimeType.includes('xml')) return 'file-code';
            return 'file';
        }

        // Function to display an error message
        function showError(message) {
            errorText.textContent = message;
            errorContainer.classList.remove('hidden');
        }
        
        // --- Marked.js Custom Renderer for Code Blocks ---
        const renderer = {
            code(code, lang) {
                // IMPORTANT FIX: If `code` is an object (a token object), use its `text` property.
                // Otherwise, ensure it's converted to a string to prevent .replace() errors.
                let actualCodeContent;
                if (typeof code === 'object' && code !== null && typeof code.text === 'string') {
                    console.warn('Marked.js code renderer received a token object, extracting text property.');
                    actualCodeContent = code.text;
                } else if (typeof code !== 'string') {
                    console.warn('Marked.js code renderer received non-string content, converting to string:', code);
                    actualCodeContent = String(code); // Fallback for other non-string cases
                } else {
                    actualCodeContent = code;
                }

                const languageDisplay = lang ? `<span class="text-xs">${lang.toUpperCase()}</span>` : '';
                // Generate a unique ID for each code block
                const uniqueId = `code-block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                
                // Escape HTML entities in the code to display correctly within <pre><code>
                const escapedCode = actualCodeContent.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');

                return `
                    <div class="code-block-container">
                        <div class="code-block-header">
                            ${languageDisplay}
                            <button class="code-block-copy-button" data-copy-target="${uniqueId}">
                                <i data-lucide="clipboard" class="w-4 h-4"></i>
                                Copy code
                            </button>
                        </div>
                        <pre><code id="${uniqueId}">${escapedCode}</code></pre>
                    </div>
                `;
            }
        };

        // Set Marked.js options to use the custom renderer
        marked.use({ renderer });


        // Function to append a message to the chat history
        function appendChatMessage(role, text, attachments = []) { // attachments is now an array of {mimeType, data, name}
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message', role);
            
            let contentHTML = '';

            if (role === 'user') {
                contentHTML += `<span class="font-bold">You:</span> ${text}`;
                if (attachments.length > 0) {
                    contentHTML += `<div class="mt-2 flex flex-wrap gap-2">`;
                    attachments.forEach(attachment => {
                        if (attachment.mimeType.startsWith('image/')) {
                            contentHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                        } else {
                            // For non-image files, display an icon and file name
                            contentHTML += `
                                <div class="flex items-center space-x-1 p-2 bg-gray-100 dark:bg-gray-600 rounded-md text-sm">
                                    <i data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0"></i>
                                    <span class="truncate max-w-[120px]">${attachment.name || 'File'}</span>
                                </div>
                            `;
                        }
                    });
                    contentHTML += `</div>`;
                }
            } else { // AI message
                // Render markdown content within a wrapper for better styling control
                contentHTML = `<div class="ai-content-wrapper">${marked.parse(text)}</div>`;
            }
            
            messageDiv.innerHTML = contentHTML;
            chatHistoryDiv.appendChild(messageDiv);
            
            // Animate message pop-in
            setTimeout(() => {
                messageDiv.style.transform = 'scale(1)';
            }, 10);
            
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            
            // Call createIcons() after adding new content to the chat history
            createIcons();
        }

        // Event listener for main image upload input
        imageUpload.addEventListener('change', async (event) => {
            const files = Array.from(event.target.files);
            if (files.length > 0) {
                uploadedMainImages = []; // Reset array
                imagePreviewsContainer.innerHTML = ''; // Clear existing previews
                previewContainer.classList.remove('hidden');
                
                // Process each file
                for (const file of files) {
                    try {
                        const { mimeType, data } = await fileToBase64(file);
                        uploadedMainImages.push({ mimeType, data });

                        // Create and append image preview
                        const img = document.createElement('img');
                        img.src = URL.createObjectURL(file);
                        img.alt = 'Image Preview';
                        img.classList.add('w-full', 'max-h-48', 'object-contain', 'rounded-xl', 'shadow-lg', 'border', 'border-gray-200');
                        imagePreviewsContainer.appendChild(img);

                    } catch (error) {
                        showError(`Failed to read file ${file.name}.`);
                        console.error('File read error:', error);
                    }
                }
                
                analyzeBtn.disabled = uploadedMainImages.length === 0;
                resultsContainer.classList.add('hidden'); // Hide previous results
                exportButtons.classList.add('hidden'); // Hide export buttons
                errorContainer.classList.add('hidden'); // Hide any previous errors
                chatHistory = []; // Clear chat history
                chatHistoryDiv.innerHTML = '';
                chatToggleButton.classList.add('hidden'); // Hide the chat button on new upload
                chatPopupWindow.classList.add('chat-hidden'); // Hide the chat popup
            } else {
                previewContainer.classList.add('hidden');
                analyzeBtn.disabled = true;
                uploadedMainImages = [];
            }
        });
        
        // Event listener for the Analyze button
        analyzeBtn.addEventListener('click', async () => {
            if (uploadedMainImages.length === 0) {
                showError('Please upload at least one image first.');
                return;
            }
            
            // Show loading state
            loadingIndicator.classList.remove('hidden');
            analyzeBtn.disabled = true;
            resultsContainer.classList.remove('hidden');
            predictionOutput.innerHTML = '';
            exportButtons.classList.add('hidden');
            errorContainer.classList.add('hidden');
            
            chatToggleButton.classList.add('hidden'); // Hide the chat button during analysis
            chatPopupWindow.classList.add('chat-hidden'); // Hide the chat popup

            // Modified prompt to be very specific about markdown code blocks for code.
            const initialPrompt = "Act as a professional sports analyst for the fantasy sports platform Dream11. You are given a screenshot(s) containing information about an upcoming cricket match. Analyze all the text and images within the screenshot(s) to find key details such as player form, team news, pitch conditions, and recent performances. Based on your thorough analysis, provide the best possible Dream11 team, including a captain and vice-captain. Your output should be a single, well-structured text block that first lists the suggested team by player role (Wicket-keeper, Batsmen, All-rounders, Bowlers) and then provides a concise, point-form analysis explaining your choices. The analysis should be grounded in the data you extracted from the image. Use clear headings for each section (e.g., ## Team Analysis) and bullet points for lists (e.g., - Player Name). IMPORTANT: If you provide any code, always wrap it in a markdown code block (e.g., ```html\n<p>Hello</p>\n``` or ```javascript\nconsole.log('hi');\n```).";

            try {
                // Build the user parts for the initial image upload
                const userParts = [{ text: initialPrompt }];
                uploadedMainImages.forEach(img => {
                    userParts.push({
                        inlineData: {
                            mimeType: img.mimeType,
                            data: img.data
                        }
                    });
                });
                
                const payload = {
                    contents: [
                        { role: "user", parts: userParts }
                    ],
                };
                
                const responseText = await callGeminiAPI(payload);
                
                // Store the raw text for sharing
                lastPredictionText = responseText;

                // Render the AI response text using Marked.js for display
                predictionOutput.innerHTML = marked.parse(responseText);
                
                // Store the full, correctly formatted API history
                chatHistory = [
                    { role: 'user', parts: userParts },
                    { role: 'model', parts: [{ text: responseText }] }
                ];
                
                // After analysis, show the chat and export buttons
                chatToggleButton.classList.remove('hidden');
                exportButtons.classList.remove('hidden');
                appendChatMessage('ai', responseText); // Also append to chat history UI
                chatInput.focus();

            } catch (error) {
                console.error('Initial API call failed:', error);
                showError(`An error occurred: ${error.message}`);
            } finally {
                loadingIndicator.classList.add('hidden');
                analyzeBtn.disabled = false;
            }
        });
        
        // Event listener for chat image/file upload
        chatImageUpload.addEventListener('change', async (event) => {
            const files = Array.from(event.target.files);
            if (files.length > 0) {
                for (const file of files) {
                    try {
                        const { mimeType, data } = await fileToBase64(file);
                        chatAttachments.push({ file, mimeType, data, name: file.name });
                    } catch (error) {
                        showError(`Failed to read chat file ${file.name}.`);
                        console.error('Chat file read error:', error);
                    }
                }
                displayChatAttachments();
                chatInput.focus();
            }
        });

        // Function to display chat attachments
        function displayChatAttachments() {
            chatAttachmentsPreviewContainer.innerHTML = '';
            if (chatAttachments.length > 0) {
                chatAttachmentsPreviewContainer.classList.remove('hidden');
                chatAttachments.forEach((attachment, index) => {
                    const attachmentDiv = document.createElement('div');
                    attachmentDiv.classList.add('flex', 'items-center', 'gap-1', 'p-2', 'rounded-md', 'bg-gray-100', 'dark:bg-gray-700', 'text-gray-800', 'dark:text-gray-200', 'text-sm');
                    attachmentDiv.dataset.index = index;

                    let previewContent = '';
                    if (attachment.mimeType.startsWith('image/')) {
                        previewContent = `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name}" class="w-10 h-10 object-cover rounded-md">`;
                    } else {
                        previewContent = `<i data-lucide="${getFileIcon(attachment.mimeType)}" class="w-5 h-5 flex-shrink-0"></i>`;
                    }

                    attachmentDiv.innerHTML = `
                        ${previewContent}
                        <span class="truncate max-w-[100px]">${attachment.name}</span>
                        <button class="remove-attachment-btn text-gray-500 hover:text-gray-900 dark:hover:text-white transition-colors p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 ml-1">
                            <i data-lucide="x" class="w-4 h-4"></i>
                        </button>
                    `;
                    chatAttachmentsPreviewContainer.appendChild(attachmentDiv);
                });
                createIcons(); // Re-render icons for new attachments
            } else {
                chatAttachmentsPreviewContainer.classList.add('hidden');
            }
        }

        // Event listener for removing individual chat attachments (using event delegation)
        chatAttachmentsPreviewContainer.addEventListener('click', (event) => {
            const removeBtn = event.target.closest('.remove-attachment-btn');
            if (removeBtn) {
                const attachmentDiv = removeBtn.closest('[data-index]');
                if (attachmentDiv) {
                    const index = parseInt(attachmentDiv.dataset.index);
                    chatAttachments.splice(index, 1); // Remove from array
                    displayChatAttachments(); // Re-render preview
                    chatInput.focus();
                }
            }
        });
        
        // Event listener for sending chat messages
        sendChatBtn.addEventListener('click', async () => {
            const userMessage = chatInput.value.trim();
            if (!userMessage && chatAttachments.length === 0) {
                return;
            }
            
            // Build the parts for the user message
            const userParts = [];
            if (userMessage) {
                userParts.push({ text: userMessage });
            }
            chatAttachments.forEach(attachment => {
                userParts.push({
                    inlineData: {
                        mimeType: attachment.mimeType,
                        data: attachment.data
                    }
                });
            });

            // Append user message and attachments to chat history and UI
            chatHistory.push({ role: 'user', parts: userParts });
            appendChatMessage('user', userMessage, chatAttachments);
            
            // Clear input and attachment after sending
            chatInput.value = '';
            chatAttachments = [];
            chatImageUpload.value = ''; // Clear file input
            displayChatAttachments(); // Clear attachment previews
            
            sendChatBtn.disabled = true;
            
            // Show loading indicator
            const loadingMessage = document.createElement('div');
            loadingMessage.id = 'chat-loading';
            loadingMessage.classList.add('p-4', 'text-center', 'text-gray-500', 'text-sm');
            loadingMessage.innerHTML = `
                <div class="loader-container h-8">
                    <div class="loader-dot bg-gray-500"></div>
                    <div class="loader-dot bg-gray-500"></div>
                    <div class="loader-dot bg-gray-500"></div>
                </div>
                <span class="mt-2 block">AI is typing...</span>
            `;
            chatHistoryDiv.appendChild(loadingMessage);
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            
            try {
                // Call API with full chat history
                const payload = {
                    contents: chatHistory,
                };
                
                const responseText = await callGeminiAPI(payload);
                
                // Append AI response to chat history and UI
                chatHistory.push({ role: 'model', parts: [{ text: responseText }] });
                appendChatMessage('ai', responseText);
                
            } catch (error) {
                console.error('Chat API call failed:', error);
                showError(`An error occurred in the chat: ${error.message}`);
            } finally {
                sendChatBtn.disabled = false;
                const loadingDiv = document.getElementById('chat-loading');
                if (loadingDiv) {
                    loadingDiv.remove();
                }
                chatInput.focus();
            }
        });
        
        // Add event listener for the 'Enter' key on the chat input
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendChatBtn.click();
            }
        });

        // Event listener for the Clear button
        clearBtn.addEventListener('click', () => {
            imageUpload.value = ''; // Reset the file input
            imagePreviewsContainer.innerHTML = ''; // Clear the image previews
            previewContainer.classList.add('hidden');
            predictionOutput.innerHTML = ''; // Clear the output text
            resultsContainer.classList.add('hidden');
            exportButtons.classList.add('hidden');
            analyzeBtn.disabled = true;
            uploadedMainImages = []; // Clear main images
            errorContainer.classList.add('hidden');
            errorText.textContent = '';
            chatToggleButton.classList.add('hidden'); // Hide chat button on clear
            chatPopupWindow.classList.add('chat-hidden'); // Hide chat popup
            chatHistory = []; // Clear chat history
            chatHistoryDiv.innerHTML = '';
            lastPredictionText = ''; // Clear the last prediction text
            
            // Clear chat-specific attachments
            chatAttachments = [];
            chatImageUpload.value = '';
            displayChatAttachments(); // Clear attachment previews
        });

        // Floating chat popup toggle logic
        chatToggleButton.addEventListener('click', () => {
            chatToggleButton.classList.add('hidden');
            chatPopupWindow.classList.remove('chat-hidden');
            chatPopupWindow.classList.add('chat-visible');
            chatInput.focus();
            // Re-render icons after the popup is made visible
            setTimeout(createIcons, 50); 
        });

        chatCloseButton.addEventListener('click', () => {
            chatToggleButton.classList.remove('hidden');
            chatPopupWindow.classList.remove('chat-visible');
            chatPopupWindow.classList.add('chat-hidden');
        });
        
        // Function to show a temporary message for clipboard copy
        function showCopyMessage() {
            copyMessage.classList.add('show');
            setTimeout(() => {
                copyMessage.classList.remove('show');
            }, 3000);
        }

        // Event listener for Save as PDF button
        savePdfBtn.addEventListener('click', async () => {
            if (!window.jspdf || !window.html2canvas) {
                showError('PDF libraries not loaded. Please try again.');
                return;
            }

            const { jsPDF } = window.jspdf;
            const content = document.getElementById('prediction-output');
            
            // Disable buttons during PDF generation
            savePdfBtn.disabled = true;
            shareTextBtn.disabled = true;

            try {
                const canvas = await html2canvas(content, {
                    scale: 2, // Increase scale for higher quality
                    useCORS: true,
                });
                const imgData = canvas.toDataURL('image/png');
                const pdf = new jsPDF('p', 'mm', 'a4');
                const imgProps = pdf.getImageProperties(imgData);
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

                // Check if content fits on one page, otherwise create multiple pages
                let currentY = 0;
                const pageHeight = pdf.internal.pageSize.height;
                const padding = 10; // Padding from page edges

                if (pdfHeight > pageHeight) {
                    let totalHeight = imgProps.height;
                    let imgX = 0;
                    let imgY = 0;
                    let imgWidth = pdfWidth;

                    while (totalHeight > 0) {
                        pdf.addImage(imgData, 'PNG', imgX, imgY - currentY, imgWidth, pdfHeight);
                        currentY += pageHeight;
                        totalHeight -= pageHeight;
                        if (totalHeight > 0) {
                            pdf.addPage();
                        }
                    }
                } else {
                    pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
                }
                
                pdf.save('Dream11_Team_Prediction.pdf');
            } catch (error) {
                console.error('Error generating PDF:', error);
                showError('Failed to generate PDF. Please try again.');
            } finally {
                // Re-enable buttons
                savePdfBtn.disabled = false;
                shareTextBtn.disabled = false;
            }
        });
        
        // Event listener for Share as Text button
        shareTextBtn.addEventListener('click', () => {
            if (lastPredictionText) {
                const textToCopy = lastPredictionText.trim();
                
                // Copy to clipboard
                const tempTextArea = document.createElement('textarea');
                tempTextArea.value = textToCopy;
                document.body.appendChild(tempTextArea);
                tempTextArea.select();
                try {
                    document.execCommand('copy');
                    showCopyMessage();
                } catch (err) {
                    console.error('Failed to copy text:', err);
                    showError('Failed to copy text. Please copy manually.');
                }
                document.body.removeChild(tempTextArea);
            } else {
                showError('No team prediction to share yet.');
            }
        });

        // Event delegation for copy code buttons within chat history
        chatHistoryDiv.addEventListener('click', (event) => {
            const copyButton = event.target.closest('.code-block-copy-button');
            if (copyButton) {
                const targetId = copyButton.dataset.copyTarget;
                const codeElement = document.getElementById(targetId);
                if (codeElement) {
                    const codeToCopy = codeElement.textContent;
                    // Use modern Clipboard API if available
                    if (navigator.clipboard && navigator.clipboard.writeText) {
                        navigator.clipboard.writeText(codeToCopy)
                            .then(() => {
                                showCopyMessage();
                                copyButton.innerHTML = `<i data-lucide="check" class="w-4 h-4"></i> Copied!`;
                                createIcons(); // Re-render icon
                                setTimeout(() => {
                                    copyButton.innerHTML = `<i data-lucide="clipboard" class="w-4 h-4"></i> Copy code`;
                                    createIcons(); // Re-render icon
                                }, 2000);
                            })
                            .catch(err => {
                                console.error('Failed to copy code: ', err);
                                showError('Failed to copy code. Please copy manually.');
                            });
                    } else {
                        // Fallback for older browsers
                        const tempTextArea = document.createElement('textarea');
                        tempTextArea.value = codeToCopy;
                        document.body.appendChild(tempTextArea);
                        tempTextArea.select();
                        try {
                            document.execCommand('copy');
                            showCopyMessage();
                             copyButton.innerHTML = `<i data-lucide="check" class="w-4 h-4"></i> Copied!`;
                             createIcons(); // Re-render icon
                             setTimeout(() => {
                                 copyButton.innerHTML = `<i data-lucide="clipboard" class="w-4 h-4"></i> Copy code`;
                                 createIcons(); // Re-render icon
                             }, 2000);
                        } catch (err) {
                            console.error('Failed to copy code (fallback):', err);
                            showError('Failed to copy code. Please copy manually.');
                        }
                        document.body.removeChild(tempTextArea);
                    }
                }
            }
        });

        // Generic API call function with exponential backoff
        async function callGeminiAPI(payload) {
            // Replace with your actual API key
            const apiKey = "AIzaSyC7twxprKoApUjR4uebBS-12KVyZTkuvrw"; 
            if (apiKey === "YOUR_GEMINI_API_KEY" || !apiKey) {
                throw new Error("API Key is not set. Please replace 'YOUR_GEMINI_API_KEY' in the script.");
            }

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            let response;
            let result;
            let success = false;
            let retryCount = 0;
            const maxRetries = 3;
            let delay = 1000; // 1 second initial delay

            while (retryCount < maxRetries && !success) {
                try {
                    response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 429) { // Too many requests
                        if (retryCount < maxRetries - 1) {
                            console.warn(`API rate limit exceeded. Retrying in ${delay / 1000}s...`);
                            await new Promise(res => setTimeout(res, delay));
                            delay *= 2; // Exponential backoff
                            retryCount++;
                        } else {
                            throw new Error('API rate limit exceeded. Please try again later.');
                        }
                    } else if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
                    } else {
                        result = await response.json();
                        success = true;
                    }
                } catch (err) {
                    if (retryCount < maxRetries - 1) {
                        console.warn(`Fetch error: ${err.message}. Retrying in ${delay / 1000}s...`);
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                        retryCount++;
                    } else {
                        throw err; // Re-throw the last error after max retries
                    }
                }
            }
            
            if (result && result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                // Return the text content from the response
                return result.candidates[0].content.parts[0].text;
            } else {
                throw new Error('Failed to get a valid response from the AI. No candidates found or content is empty.');
            }
        }
    </script>
</body>
</html>

----------------------------------------------------------------------------

do the following and send me the full updated code : 

add a copy button at the end of every text message. (just like chatgpt)
add a dictate button beside the copy button under every text message. (just like chatgpt)
improve the design of the website.
